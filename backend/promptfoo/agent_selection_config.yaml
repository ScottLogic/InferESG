description: "Agent selection"

data_store_agent:
  &data_store_agent {
    "agent": "DatastoreAgent",
    "description": "This agent is responsible for answering questions about the bloomberg.csv dataset. This includes retrieving ESG scores, financial metrics, and other bloomberg-specific information. It interacts with the graph database to extract, process, and return ESG-related information from various sources, such as company sustainability reports or fund portfolios. This agent can not answer questions that do not specifically reference the bloomberg.csv dataset.",
    "tools":
      [
        {
          "name": "generate cypher query",
          "description": "Generate Cypher query if the category is data driven, based on the operation to be performed",
          "parameters":
            {
              "question_intent":
                {
                  "type": "string",
                  "description": "The intent the question will be based on",
                },
              "operation":
                {
                  "type": "string",
                  "description": "The operation the cypher query will have to perform",
                },
              "question_params":
                {
                  "type": "string",
                  "description": "The specific parameters required for the question to be answered with the question_intent or none if no params required",
                },
              "aggregation":
                {
                  "type": "string",
                  "description": "Any aggregation that is required to answer the question or none if no aggregation is needed",
                },
              "sort_order":
                {
                  "type": "string",
                  "description": "The order a list should be sorted in or none if no sort_order is needed",
                },
              "timeframe":
                {
                  "type": "string",
                  "description": "string of the timeframe to be considered or none if no timeframe is needed",
                },
            },
        },
      ],
  }
web_agent:
  &web_agent {
    "name": "WebAgent",
    "description": "This agent can search the internet to answer questions which require current information or general ESG or company related questions.",
    "tools":
      [
        {
          "name": "web_general_search",
          "description": "Search the internet based on the query provided and then get the meaningful answer from the content found",
          "parameters":
            {
              "search_query":
                {
                  "type": "string",
                  "description": "The search query to find information on the internet",
                },
            },
        },
      ],
  }
materiality_agent:
  &materiality_agent {
    "name": "MaterialityAgent",
    "description": "The Materiality Agent can answer questions about specific industry ESG Materiality standards and reporting practices. The agent cannot provide current information about specific companies, their performance, or their individual ESG practices.",
    "tools":
      [
        {
          "name": "answer_materiality_question",
          "description": "This tool can answer questions about ESG Materiality for a specific named company or sector and explain materiality topics in detail. Topics include:  typical sector activities, value chain and business relationships..",
          "parameters":
            {
              "question": { "type": "string", "description": "The question to answer." },
              "subject":
                {
                  "type": "string",
                  "description": "The name of a specific sector, industry or company.",
                },
            },
        },
      ],
  }
file_agent:
  &file_agent {
    "name": "FileAgent",
    "description": "This agent can retrieve information from files uploaded by the user. The user has uploaded the following files astra-zeneca-2024.pdf",
    "tools":
      [
        {
          "name": "find_info_in_file",
          "description": "This tool can answer questions about ESG Materiality for a specific named company or sector and explain materiality topics in detail. Topics include:  typical sector activities, value chain and business relationships..",
          "parameters":
            {
              "question": { "type": "string", "description": "The question to answer." },
              "filename":
                {
                  "type": "string",
                  "description": "The name of the file to extract related information from",
                },
            },
        },
      ],
  }
list_of_agents_and_tools:
  &list_of_agents_and_tools [*data_store_agent, *web_agent, *materiality_agent, *file_agent]

providers:
  - id: openai:gpt-4o
    config:
      temperature: 0
      response_format:
        type: json_object

prompts: file://promptfoo_test_runner.py:create_prompt
# TODO update these tests with new params
tests:
  - description: "Test WHEN answering a question for current information on a company THEN the web agent is selected"
    vars:
      user_prompt_template: "agent-selection-user-prompt"
      user_prompt_args:
        question: "What is Astra Zeneca's current greenhouse gas emissions reporting methodology, specifically the primary calculation approach (location-based vs. market-based)?"
        list_of_agents_and_tools: *list_of_agents_and_tools
      system_prompt_template: "agent-selection-system-prompt"
    options:
      transform: JSON.parse(output)
    assert:
      - type: javascript
        value: output.agent === "WebAgent" && output.tool === "web_general_search"
      - type: javascript
        value: output.parameters.search_query === "Astra Zeneca current greenhouse gas emissions reporting methodology primary calculation approach location-based vs market-based"

  - description: "Test WHEN the Web Agent tool has failed and been removed from the list of options and answering a question for current information on a company THEN no agent is selected"
    vars:
      user_prompt_template: "agent-selection-user-prompt"
      user_prompt_args:
        question: "What is Astra Zeneca's current greenhouse gas emissions reporting methodology, specifically the primary calculation approach (location-based vs. market-based)?"
        list_of_agents_and_tools: [*data_store_agent, *materiality_agent]
      system_prompt_template: "agent-selection-system-prompt"
    options:
      transform: JSON.parse(output)
    assert:
      - type: javascript
        value: output.agent === ""

  - description: "Test WHEN answering a question about materiality THEN materiality agent is selected"
    vars:
      user_prompt_template: "agent-selection-user-prompt"
      user_prompt_args:
        question: "What topics are material to the Biotech industry?"
        list_of_agents_and_tools: *list_of_agents_and_tools
      system_prompt_template: "agent-selection-system-prompt"
    options:
      transform: JSON.parse(output)
    assert:
      - type: javascript
        value: output.agent === "MaterialityAgent" && output.tool === "answer_materiality_question"

  - description: "Test WHEN the materiality and web agent have failed answering a question about materiality THEN no agent is selected"
    vars:
      user_prompt_template: "agent-selection-user-prompt"
      user_prompt_args:
        question: "Identify topics material to Shell?"
        list_of_agents_and_tools: [*data_store_agent]
      system_prompt_template: "agent-selection-system-prompt"
    options:
      transform: JSON.parse(output)
    assert:
      - type: javascript
        value: output.agent === ""

  - description: "Test the WebAgent is selected for an ESG data query when not related to bloomberg dataset"
    vars:
      user_prompt_template: "agent-selection-user-prompt"
      user_prompt_args:
        question: "What are the environmental factors that influence a company's ESG score?"
        list_of_agents_and_tools: *list_of_agents_and_tools
      system_prompt_template: "agent-selection-system-prompt"
    assert:
      - type: javascript
        value: JSON.parse(output).agent === "WebAgent"

  - description: "Test the WebAgent is selected for queries about the news"
    vars:
      user_prompt_template: "agent-selection-user-prompt"
      user_prompt_args:
        question: "Are there any recent news articles discussing 3M Co's ESG initiatives?"
        list_of_agents_and_tools: *list_of_agents_and_tools
      system_prompt_template: "agent-selection-system-prompt"
    assert:
      - type: javascript
        value: JSON.parse(output).agent === "WebAgent"

  - description: "Test the WebAgent is selected for queries about todays weather"
    vars:
      user_prompt_template: "agent-selection-user-prompt"
      user_prompt_args:
        question: "what is todays weather in dublin?"
        list_of_agents_and_tools: *list_of_agents_and_tools
      system_prompt_template: "agent-selection-system-prompt"
    assert:
      - type: javascript
        value: JSON.parse(output).agent === "WebAgent"

  - description: "Test the WebAgent is selected for a website query"
    vars:
      user_prompt_template: "agent-selection-user-prompt"
      user_prompt_args:
        question: "What are Ryanair saying they are doing to combat climate change on their website?"
        list_of_agents_and_tools: *list_of_agents_and_tools
      system_prompt_template: "agent-selection-system-prompt"
    assert:
      - type: javascript
        value: JSON.parse(output).agent === "WebAgent"

  - description: "Test the WebAgent is selected for conversational matters"
    vars:
      user_prompt_template: "agent-selection-user-prompt"
      user_prompt_args:
        question: "Hello how are you?"
        list_of_agents_and_tools: *list_of_agents_and_tools
      system_prompt_template: "agent-selection-system-prompt"
    assert:
      - type: javascript
        value: JSON.parse(output).agent === ""

  # Note: This test is known to fail. We plan for this test to pass through improvements to the agent selection prompt
  - description: "Test the DatastoreAgent is not selected when the question does not reference the bloomberg dataset"
    vars:
      user_prompt_template: "agent-selection-user-prompt"
      user_prompt_args:
        question: "What was the ESG score of AstraZeneca in 2020?"
        list_of_agents_and_tools: *list_of_agents_and_tools
      system_prompt_template: "agent-selection-system-prompt"
    assert:
      - type: javascript
        value: JSON.parse(output).agent != "DatastoreAgent"

  - description: "Test the DatastoreAgent is selected for a data query related to the bloomberg dataset"
    vars:
      user_prompt_template: "agent-selection-user-prompt"
      user_prompt_args:
        question: "Which company name has the highest environmental ESG score in the bloomberg dataset?"
        list_of_agents_and_tools: *list_of_agents_and_tools
      system_prompt_template: "agent-selection-system-prompt"
    assert:
      - type: javascript
        value: JSON.parse(output).agent === "DatastoreAgent"

  - description: "Test the DatastoreAgent is selected for a data query from the bloomberg.csv"
    vars:
      user_prompt_template: "agent-selection-user-prompt"
      user_prompt_args:
        question: "From the Bloomberg.csv data show me all the governance scores for american airlines in date order starting in the past."
        list_of_agents_and_tools: *list_of_agents_and_tools
      system_prompt_template: "agent-selection-system-prompt"
    assert:
      - type: javascript
        value: JSON.parse(output).agent === "DatastoreAgent"

  - description: "Test the DatastoreAgent is selected for a query of 'the database'"
    vars:
      user_prompt_template: "agent-selection-user-prompt"
      user_prompt_args:
        question: "Check the database and give me all data for Masco Corp"
        list_of_agents_and_tools: *list_of_agents_and_tools
      system_prompt_template: "agent-selection-system-prompt"
    assert:
      - type: javascript
        value: JSON.parse(output).agent === "DatastoreAgent"


  - description: "Test WHEN company file is uploaded and user has asked a question and web agent not available THEN FileAgent is selected"
    vars:
      user_prompt_template: "agent-selection-user-prompt"
      user_prompt_args:
        question: "What is AstraZeneca's current greenhouse gas emissions reporting methodology, specifically the primary calculation approach (location-based vs. market-based)"
        list_of_agents_and_tools: [*data_store_agent, *materiality_agent, *file_agent]
      system_prompt_template: "agent-selection-system-prompt"
    assert:
      - type: javascript
        value: JSON.parse(output).agent === "FileAgent"
