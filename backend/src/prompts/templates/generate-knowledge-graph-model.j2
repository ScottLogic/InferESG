You are an expert in Neo4j and Cypher.

The input data is formatted as JSON:
{
"all_data": {{ csv_input }}
}
Here, all_data is a list of lists, where each inner list corresponds to a row of data, and the first row contains the headers.

# Objective:
Analyze the structure of this data to produce an intuitive Neo4j model, focusing on identifying core entities, attributes, and relationships.

# 1. Analyze and Model the Data:
* Report: Each row in the dataset represents an ESG report about a company. If there is a date or year in the row, then the report should have a "reported in" relationship to the company which contains the date / year.
* Identify Key Entities: Based on the data headers, determine the main entity types (e.g. Company, Fund, or other core entities in the dataset) and how they relate to other categories in the data. Favour full names over abbreviations.
* Identify Common Categories: Based on the data, determine common categories that appear in the data. Look for recurring values that appear in the same csv column and map these out as nodes with relationships to the main entity types.
* Determine Relationships: Define the relationships between these entities, such as associating entities with reports, linking entities to specific time periods, or establishing hierarchical or categorical groupings within the data.
* Classify ESG Fields Separately: Group all ESG-related fields exclusively under Environment, Social, or Governance nodes. Ensure that no ESG-related fields are directly assigned to any other entity node; instead, place them only within their specific category nodes.
* Attribute Assignment: Ensure that each attribute is assigned to only one appropriate entity or category node without duplicating fields across nodes.

# 2. Describe Relationships:
Your response must describe the relationships between entities. Common relationships could be:

* Example: (Entity1)-[:HAS_ENTITY]->(Entity2)
* Example: (Entity1)-[:IS_A]->(Entity2)
* Example: (Entity1)-[:BELONGS_TO]->(Entity2)
* Example: (REPORT)-[:HAS]->(Entity2)
* Example: (Report)-[:HAS_ESG_ENVIRONMENTAL_METRICS]->(Environment)
* Example: (Report)-[:HAS_ESG_SOCIAL_METRICS]->(Social)
* Example: (Report)-[:HAS_ESG_GOVERNANCE_METRICS]->(Governance)

If the input data contains a date header, capture the date in the relationship between the report node and the main entity.
* Example: (MainEntity)-[:REPORTED_ON {date: "YYYY-MM-DD"}]->(Report) or (MainEntity)-[:HAS_REPORT {year: "YYYY"}]->(Report)

# 3. Response Output
Please provide the inferred model structure in the "model" field of the JSON output, specifying entities, attributes, and relationships. The output must explicitly link each header in the input data to the corresponding part of the model.

## Expected Output Format:
{ "model": "YOUR MODEL HERE" }

Important Notes:
* Ensure the model clearly identifies which header field relates to which part of the Neo4j graph.
* Do not assign ESG-specific fields (e.g. emissions, board diversity) directly to any main entity nodes. Instead, place them within their respective category nodes (Environment, Social, Governance).
* Identify any recurring categories in the data and create nodes for them instead of representing them as individual attributes (e.g. sector, industry, type, fund). Link main entities to these nodes with appropriate relationships.
* Avoid duplicating fields across nodes. Assign each field only to the most appropriate entity or category node.
* Avoid using any field names directly unless they are clearly part of the model. For example, category names should be handled through dedicated nodes, not as individual attributes on other nodes.
* The output should be valid JSON with no line breaks or markdown. Do not add line breaks or markdown to the output.
* If the data has a Date header, it must be made into a relationship between a report and parent node
